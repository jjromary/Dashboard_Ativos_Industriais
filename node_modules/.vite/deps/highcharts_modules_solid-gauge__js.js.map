{
  "version": 3,
  "sources": ["../../highcharts/modules/solid-gauge.src.js"],
  "sourcesContent": ["/**\n * @license Highcharts JS v10.3.2 (2022-11-28)\n *\n * Solid angular gauge module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/solid-gauge', ['highcharts', 'highcharts/highcharts-more'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/SolidGaugeAxis.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var color = Color.parse;\n        var extend = U.extend,\n            merge = U.merge;\n        /**\n         * @private\n         */\n        var SolidGaugeAxis;\n        (function (SolidGaugeAxis) {\n            /* *\n             *\n             *  Interfaces\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * These methods are defined in the ColorAxis object, and copied here.\n             * @private\n             *\n             * @todo\n             * If we implement an AMD system we should make ColorAxis a dependency.\n             */\n            var methods = {\n                    initDataClasses: function (userOptions) {\n                        var chart = this.chart,\n                dataClasses,\n                colorCounter = 0,\n                options = this.options;\n                    this.dataClasses = dataClasses = [];\n                    userOptions.dataClasses.forEach(function (dataClass, i) {\n                        var colors;\n                        dataClass = merge(dataClass);\n                        dataClasses.push(dataClass);\n                        if (!dataClass.color) {\n                            if (options.dataClassColor === 'category') {\n                                colors = chart.options.colors;\n                                dataClass.color = colors[colorCounter++];\n                                // loop back to zero\n                                if (colorCounter === colors.length) {\n                                    colorCounter = 0;\n                                }\n                            }\n                            else {\n                                dataClass.color = color(options.minColor).tweenTo(color(options.maxColor), i / (userOptions.dataClasses.length - 1));\n                            }\n                        }\n                    });\n                },\n                initStops: function (userOptions) {\n                    this.stops = userOptions.stops || [\n                        [0, this.options.minColor],\n                        [1, this.options.maxColor]\n                    ];\n                    this.stops.forEach(function (stop) {\n                        stop.color = color(stop[1]);\n                    });\n                },\n                // Translate from a value to a color\n                toColor: function (value, point) {\n                    var pos,\n                        stops = this.stops,\n                        from,\n                        to,\n                        color,\n                        dataClasses = this.dataClasses,\n                        dataClass,\n                        i;\n                    if (dataClasses) {\n                        i = dataClasses.length;\n                        while (i--) {\n                            dataClass = dataClasses[i];\n                            from = dataClass.from;\n                            to = dataClass.to;\n                            if ((typeof from === 'undefined' || value >= from) &&\n                                (typeof to === 'undefined' || value <= to)) {\n                                color = dataClass.color;\n                                if (point) {\n                                    point.dataClass = i;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        if (this.logarithmic) {\n                            value = this.val2lin(value);\n                        }\n                        pos = 1 - ((this.max - value) / (this.max - this.min));\n                        i = stops.length;\n                        while (i--) {\n                            if (pos > stops[i][0]) {\n                                break;\n                            }\n                        }\n                        from = stops[i] || stops[i + 1];\n                        to = stops[i + 1] || from;\n                        // The position within the gradient\n                        pos = (1 - (to[0] - pos) / ((to[0] -\n                            from[0]) || 1));\n                        color = from.color.tweenTo(to.color, pos);\n                    }\n                    return color;\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function init(axis) {\n                extend(axis, methods);\n            }\n            SolidGaugeAxis.init = init;\n        })(SolidGaugeAxis || (SolidGaugeAxis = {}));\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return SolidGaugeAxis;\n    });\n    _registerModule(_modules, 'Series/SolidGauge/SolidGaugeSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Solid angular gauge module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A solid gauge is a circular gauge where the value is indicated by a filled\n         * arc, and the color of the arc may variate with the value.\n         *\n         * @sample highcharts/demo/gauge-solid/\n         *         Solid gauges\n         *\n         * @extends      plotOptions.gauge\n         * @excluding    dial, pivot, wrap\n         * @product      highcharts\n         * @requires     modules/solid-gauge\n         * @optionparent plotOptions.solidgauge\n         */\n        var SolidGaugeSeriesDefaults = {\n                /**\n                 * The inner radius for points in a solid gauge. Can be given only in\n                 * percentage, either as a number or a string like `\"50%\"`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n                 *         Individual radius and innerRadius\n                 *\n                 * @type      {string}\n                 * @default   \"60%\"\n                 * @since     4.1.6\n                 * @product   highcharts\n                 * @apioption plotOptions.solidgauge.innerRadius\n                 */\n                /**\n                 * Whether the strokes of the solid gauge should be `round` or `square`.\n                 *\n                 * @sample {highcharts} highcharts/demo/gauge-activity/\n                 *         Rounded gauge\n                 *\n                 * @type       {string}\n                 * @default    round\n                 * @since      4.2.2\n                 * @product    highcharts\n                 * @validvalue [\"square\", \"round\"]\n                 * @apioption  plotOptions.solidgauge.linecap\n                 */\n                /**\n                 * Allow the gauge to overshoot the end of the perimeter axis by this\n                 * many degrees. Say if the gauge axis goes from 0 to 60, a value of\n                 * 100, or 1000, will show 5 degrees beyond the end of the axis when this\n                 * option is set to 5.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     3.0.10\n                 * @product   highcharts\n                 * @apioption plotOptions.solidgauge.overshoot\n                 */\n                /**\n                 * The outer radius for points in a solid gauge. Can be given only in\n                 * percentage, either as a number or a string like `\"100%\"`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n                 *         Individual radius and innerRadius\n                 *\n                 * @type      {string}\n                 * @default   \"100%\"\n                 * @since     4.1.6\n                 * @product   highcharts\n                 * @apioption plotOptions.solidgauge.radius\n                 */\n                /**\n                 * Whether to draw rounded edges on the gauge.\n                 *\n                 * @sample {highcharts} highcharts/demo/gauge-activity/\n                 *         Activity Gauge\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     5.0.8\n                 * @product   highcharts\n                 * @apioption plotOptions.solidgauge.rounded\n                 */\n                /**\n                 * The threshold or base level for the gauge.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/solidgauge-threshold/\n                 *         Zero threshold with negative and positive values\n                 *\n                 * @type      {number|null}\n                 * @since     5.0.3\n                 * @product   highcharts\n                 * @apioption plotOptions.solidgauge.threshold\n                 */\n                /**\n                 * Whether to give each point an individual color.\n                 */\n                colorByPoint: true,\n                dataLabels: {\n                    y: 0\n                }\n            };\n        /**\n         * A `solidgauge` series. If the [type](#series.solidgauge.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         *\n         * @extends   series,plotOptions.solidgauge\n         * @excluding animationLimit, boostThreshold, connectEnds, connectNulls,\n         *            cropThreshold, dashStyle, dataParser, dataURL, dial,\n         *            findNearestPointBy, getExtremesFromAll, marker, negativeColor,\n         *            pointPlacement, pivot, shadow, softThreshold, stack, stacking,\n         *            states, step, threshold, turboThreshold, wrap, zoneAxis, zones,\n         *            dataSorting, boostBlending\n         * @product   highcharts\n         * @requires  modules/solid-gauge\n         * @apioption series.solidgauge\n         */\n        /**\n         * An array of data points for the series. For the `solidgauge` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.solidgauge.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 5,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * The typical gauge only contains a single data value.\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.gauge.data\n         * @product   highcharts\n         * @apioption series.solidgauge.data\n         */\n        /**\n         * The inner radius of an individual point in a solid gauge. Can be given only\n         * in percentage, either as a number or a string like `\"50%\"`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n         *         Individual radius and innerRadius\n         *\n         * @type      {string}\n         * @since     4.1.6\n         * @product   highcharts\n         * @apioption series.solidgauge.data.innerRadius\n         */\n        /**\n         * The outer radius of an individual point in a solid gauge. Can be\n         * given only in percentage, either as a number or a string like `\"100%\"`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n         *         Individual radius and innerRadius\n         *\n         * @type      {string}\n         * @since     4.1.6\n         * @product   highcharts\n         * @apioption series.solidgauge.data.radius\n         */\n        ''; // keeps doclets above in transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SolidGaugeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/SolidGauge/SolidGaugeComposition.js', [_modules['Core/Renderer/SVG/SVGRenderer.js']], function (SVGRenderer) {\n        /* *\n         *\n         *  Solid angular gauge module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var _a = SVGRenderer.prototype,\n            symbols = _a.symbols,\n            arc = _a.symbols.arc;\n        /**\n         * Additional options, depending on the actual symbol drawn.\n         *\n         * @interface Highcharts.SymbolOptionsObject\n         */ /**\n        * Whether to draw rounded edges.\n        * @name Highcharts.SymbolOptionsObject#rounded\n        * @type {boolean|undefined}\n        */\n        /**\n         * Symbol definition of an arc with round edges.\n         *\n         * @private\n         * @function Highcharts.Renderer#symbols.arc\n         *\n         * @param {number} x\n         *        The X coordinate for the top left position.\n         *\n         * @param {number} y\n         *        The Y coordinate for the top left position.\n         *\n         * @param {number} w\n         *        The pixel width.\n         *\n         * @param {number} h\n         *        The pixel height.\n         *\n         * @param {Highcharts.SymbolOptionsObject} [options]\n         *        Additional options, depending on the actual symbol drawn.\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path of the created arc.\n         */\n        symbols.arc = function (x, y, w, h, options) {\n            var path = arc(x,\n                y,\n                w,\n                h,\n                options);\n            if (options && options.rounded) {\n                var r = options.r || w,\n                    smallR = (r - (options.innerR || 0)) / 2,\n                    outerArcStart = path[0],\n                    innerArcStart = path[2];\n                if (outerArcStart[0] === 'M' && innerArcStart[0] === 'L') {\n                    var x1 = outerArcStart[1],\n                        y1 = outerArcStart[2],\n                        x2 = innerArcStart[1],\n                        y2 = innerArcStart[2],\n                        roundStart = [\n                            'A',\n                        smallR,\n                        smallR, 0, 1, 1,\n                        x1,\n                        y1\n                        ],\n                        roundEnd = ['A',\n                        smallR,\n                        smallR, 0, 1, 1,\n                        x2,\n                        y2];\n                    // Replace the line segment and the last close segment\n                    path[2] = roundEnd;\n                    path[4] = roundStart;\n                }\n            }\n            return path;\n        };\n\n    });\n    _registerModule(_modules, 'Series/SolidGauge/SolidGaugeSeries.js', [_modules['Core/Legend/LegendSymbol.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Axis/SolidGaugeAxis.js'], _modules['Series/SolidGauge/SolidGaugeSeriesDefaults.js'], _modules['Core/Utilities.js']], function (LegendSymbol, SeriesRegistry, SolidGaugeAxis, SolidGaugeSeriesDefaults, U) {\n        /* *\n         *\n         *  Solid angular gauge module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n                var extendStatics = function (d,\n            b) {\n                    extendStatics = Object.setPrototypeOf ||\n                        ({ __proto__: [] } instanceof Array && function (d,\n            b) { d.__proto__ = b; }) ||\n                        function (d,\n            b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes,\n            GaugeSeries = _a.gauge,\n            pieProto = _a.pie.prototype;\n        var clamp = U.clamp,\n            extend = U.extend,\n            isNumber = U.isNumber,\n            merge = U.merge,\n            pick = U.pick,\n            pInt = U.pInt;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * SolidGauge series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.solidgauge\n         *\n         * @augments Highcarts.Series\n         */\n        var SolidGaugeSeries = /** @class */ (function (_super) {\n                __extends(SolidGaugeSeries, _super);\n            function SolidGaugeSeries() {\n                /* *\n                 *\n                 *  Static properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this,\n                    arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.points = void 0;\n                _this.options = void 0;\n                _this.axis = void 0;\n                _this.yAxis = void 0;\n                _this.startAngleRad = void 0;\n                _this.thresholdAngleRad = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // Extend the translate function to extend the Y axis with the necessary\n            // decoration (#5895).\n            SolidGaugeSeries.prototype.translate = function () {\n                var axis = this.yAxis;\n                SolidGaugeAxis.init(axis);\n                // Prepare data classes\n                if (!axis.dataClasses && axis.options.dataClasses) {\n                    axis.initDataClasses(axis.options);\n                }\n                axis.initStops(axis.options);\n                // Generate points and inherit data label position\n                GaugeSeries.prototype.translate.call(this);\n            };\n            // Draw the points where each point is one needle.\n            SolidGaugeSeries.prototype.drawPoints = function () {\n                var series = this,\n                    yAxis = series.yAxis,\n                    center = yAxis.center,\n                    options = series.options,\n                    renderer = series.chart.renderer,\n                    overshoot = options.overshoot,\n                    overshootVal = isNumber(overshoot) ?\n                        overshoot / 180 * Math.PI :\n                        0;\n                var thresholdAngleRad;\n                // Handle the threshold option\n                if (isNumber(options.threshold)) {\n                    thresholdAngleRad = yAxis.startAngleRad + yAxis.translate(options.threshold, void 0, void 0, void 0, true);\n                }\n                this.thresholdAngleRad = pick(thresholdAngleRad, yAxis.startAngleRad);\n                for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n                    var point = _a[_i];\n                    // #10630 null point should not be draw\n                    if (!point.isNull) { // condition like in pie chart\n                        var radius = ((pInt(pick(point.options.radius,\n                            options.radius, 100 // %\n                            )) * center[2]) / 200),\n                            innerRadius = ((pInt(pick(point.options.innerRadius,\n                            options.innerRadius, 60 // %\n                            )) * center[2]) / 200),\n                            axisMinAngle = Math.min(yAxis.startAngleRad,\n                            yAxis.endAngleRad),\n                            axisMaxAngle = Math.max(yAxis.startAngleRad,\n                            yAxis.endAngleRad);\n                        var graphic = point.graphic,\n                            rotation = (yAxis.startAngleRad +\n                                yAxis.translate(point.y,\n                            void 0,\n                            void 0,\n                            void 0,\n                            true)),\n                            shapeArgs = void 0,\n                            d = void 0,\n                            toColor = yAxis.toColor(point.y,\n                            point),\n                            minAngle = void 0,\n                            maxAngle = void 0;\n                        if (toColor === 'none') { // #3708\n                            toColor = point.color || series.color || 'none';\n                        }\n                        if (toColor !== 'none') {\n                            point.color = toColor;\n                        }\n                        // Handle overshoot and clipping to axis max/min\n                        rotation = clamp(rotation, axisMinAngle - overshootVal, axisMaxAngle + overshootVal);\n                        // Handle the wrap option\n                        if (options.wrap === false) {\n                            rotation = clamp(rotation, axisMinAngle, axisMaxAngle);\n                        }\n                        minAngle = Math.min(rotation, series.thresholdAngleRad);\n                        maxAngle = Math.max(rotation, series.thresholdAngleRad);\n                        if (maxAngle - minAngle > 2 * Math.PI) {\n                            maxAngle = minAngle + 2 * Math.PI;\n                        }\n                        point.shapeArgs = shapeArgs = {\n                            x: center[0],\n                            y: center[1],\n                            r: radius,\n                            innerR: innerRadius,\n                            start: minAngle,\n                            end: maxAngle,\n                            rounded: options.rounded\n                        };\n                        point.startR = radius; // For PieSeries.animate\n                        if (graphic) {\n                            d = shapeArgs.d;\n                            graphic.animate(extend({ fill: toColor }, shapeArgs));\n                            if (d) {\n                                shapeArgs.d = d; // animate alters it\n                            }\n                        }\n                        else {\n                            point.graphic = graphic = renderer.arc(shapeArgs)\n                                .attr({\n                                fill: toColor,\n                                'sweep-flag': 0\n                            })\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            if (options.linecap !== 'square') {\n                                graphic.attr({\n                                    'stroke-linecap': 'round',\n                                    'stroke-linejoin': 'round'\n                                });\n                            }\n                            graphic.attr({\n                                stroke: options.borderColor || 'none',\n                                'stroke-width': options.borderWidth || 0\n                            });\n                        }\n                        if (graphic) {\n                            graphic.addClass(point.getClassName(), true);\n                        }\n                    }\n                }\n            };\n            // Extend the pie slice animation by animating from start angle and up.\n            SolidGaugeSeries.prototype.animate = function (init) {\n                if (!init) {\n                    this.startAngleRad = this.thresholdAngleRad;\n                    pieProto.animate.call(this, init);\n                }\n            };\n            SolidGaugeSeries.defaultOptions = merge(GaugeSeries.defaultOptions, SolidGaugeSeriesDefaults);\n            return SolidGaugeSeries;\n        }(GaugeSeries));\n        extend(SolidGaugeSeries.prototype, {\n            drawLegendSymbol: LegendSymbol.drawRectangle\n        });\n        SeriesRegistry.registerSeriesType('solidgauge', SolidGaugeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SolidGaugeSeries;\n    });\n    _registerModule(_modules, 'masters/modules/solid-gauge.src.js', [], function () {\n\n\n    });\n}));"],
  "mappings": "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",
  "names": ["factory", "module", "exports", "define", "amd", "Highcharts", "undefined", "_registerModule", "obj", "path", "args", "fn", "hasOwnProperty", "apply", "CustomEvent", "window", "dispatchEvent", "detail", "_modules", "Color", "U", "color", "parse", "extend", "merge", "SolidGaugeAxis", "methods", "initDataClasses", "userOptions", "chart", "dataClasses", "colorCounter", "options", "forEach", "dataClass", "i", "push", "dataClassColor", "colors", "length", "minColor", "tweenTo", "maxColor", "initStops", "stops", "stop", "toColor", "value", "point", "from", "to", "logarithmic", "val2lin", "pos", "max", "min", "init", "axis", "SolidGaugeSeriesDefaults", "colorByPoint", "dataLabels", "y", "SVGRenderer", "_a", "prototype", "arc", "symbols", "symbols.arc", "x", "w", "h", "rounded", "smallR", "r", "innerR", "outerArcStart", "innerArcStart", "roundStart", "roundEnd", "LegendSymbol", "SeriesRegistry", "__extends", "extendStatics", "d", "b", "Object", "setPrototypeOf", "__proto__", "Array", "p", "__", "constructor", "create", "seriesTypes", "GaugeSeries", "gauge", "pieProto", "pie", "clamp", "isNumber", "pick", "pInt", "SolidGaugeSeries", "_super", "_this", "arguments", "data", "points", "yAxis", "startAngleRad", "thresholdAngleRad", "translate", "SolidGaugeSeries.prototype.translate", "call", "drawPoints", "SolidGaugeSeries.prototype.drawPoints", "series", "center", "renderer", "overshoot", "overshootVal", "Math", "PI", "threshold", "_i", "isNull", "radius", "innerRadius", "axisMinAngle", "endAngleRad", "axisMaxAngle", "graphic", "rotation", "wrap", "minAngle", "maxAngle", "shapeArgs", "start", "end", "startR", "animate", "fill", "attr", "add", "group", "styledMode", "linecap", "stroke", "borderColor", "borderWidth", "addClass", "getClassName", "SolidGaugeSeries.prototype.animate", "defaultOptions", "drawLegendSymbol", "drawRectangle", "registerSeriesType"]
}
